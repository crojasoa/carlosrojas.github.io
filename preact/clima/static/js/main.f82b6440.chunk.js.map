{"version":3,"sources":["components/Header.jsx","components/Formulario.jsx","components/Resultado.jsx","helpers/helper.js","App.jsx","reportWebVitals.js","index.js"],"names":["Header","titulo","className","href","Formulario","guardarLocacion","guardarConsultar","useState","ciudad","pais","busqueda","guardarBusqueda","error","guardarError","message","guardarMessage","handleChange","e","target","name","value","onSubmit","preventDefault","trim","onChange","type","id","htmlFor","Resultado","resultado","cod","kelvin","main","weather","clima","descripcion","description","traducirClima","traducirDescripcion","parseFloat","temp","toFixed","temp_max","temp_min","App","locacion","consultar","guardarResultado","useEffect","a","console","log","url","fetch","resp","json","result","consultarAPI","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f82b6440.chunk.js","sourcesContent":["const Header = ({ titulo }) => {\n  return (\n    <nav>\n      <div className=\"nav-wrapper light-blue darken-2\"> \n        <a href=\"#!\" className=\"brand-logo\">\n          { titulo }\n        </a>\n      </div>\n    </nav>\n  );\n}\n\nexport default Header;\n","import { Fragment, useState } from \"react\";\n\nconst Formulario = ({ guardarLocacion, guardarConsultar }) => {\n  //State del formulario\n  const [busqueda, guardarBusqueda] = useState({\n    ciudad: \"\",\n    pais: \"\",\n  });\n  const [error, guardarError] = useState(false);\n  const [message, guardarMessage] = useState(\"\");\n  const { ciudad, pais } = busqueda;\n  // Función que coloca los elementos en el state\n  const handleChange = (e) => {\n    guardarBusqueda({\n      ...busqueda,\n      [e.target.name]: e.target.value,\n    });\n  };\n  // Cuando el usuario da submit al form\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    //validar\n    if (ciudad.trim() === \"\" || pais.trim() === \"\") {\n      guardarError(true);\n      guardarMessage(\"Debe escribir una ciudad y un pais\");\n      return;\n    }\n    //pasar al componente principal\n    guardarError(false);\n    guardarLocacion(busqueda);\n    guardarConsultar(true);\n  };\n\n  return (\n    <Fragment>\n      <form onSubmit={handleSubmit}>\n        <div className=\"input-field col s12\">\n          <input\n            onChange={handleChange}\n            type=\"text\"\n            name=\"ciudad\"\n            id=\"ciudad\"\n            value={ciudad}\n          />\n          <label htmlFor=\"ciudad\">Ciudad: </label>\n        </div>\n        <div className=\"input-field col s12\">\n          <select onChange={handleChange} name=\"pais\" id=\"pais\" value={pais}>\n            <option value=\"\">--- Seleccione un país ---</option>\n            <option value=\"US\">Estados Unidos</option>\n            <option value=\"MX\">México</option>\n            <option value=\"AR\">Argentina</option>\n            <option value=\"VE\">Venezuela</option>\n            <option value=\"CO\">Colombia</option>\n            <option value=\"CR\">Costa Rica</option>\n            <option value=\"ES\">España</option>\n            <option value=\"PE\">Perú</option>\n          </select>\n          <label htmlFor=\"pais\"> País </label>\n        </div>\n        {error ? <p className=\"red darken-4 error\"> {message} </p> : null}\n        <div className=\"input-field col s12\">\n          <button\n            type=\"submit\"\n            value=\"Buscar Clima\"\n            className=\"col s12 waves-effect waves-light btn-large btn-block yellow accent-4\"\n          > Buscar clima </button>\n        </div>\n      </form>\n    </Fragment>\n  );\n};\n\nexport default Formulario;\n","import { traducirClima, traducirDescripcion } from \"./../helpers/helper\";\n\nconst Resultado = ({ resultado }) => {\n  //Previene la renderización si aun no hay un resultado\n  if (!resultado) return null;\n  if (resultado.cod === \"404\") return <p> Ciudad no encontrada </p>;\n  //Grados Kelvin\n  const kelvin = 273.15;\n\n  const { name, main, weather } = resultado;\n  let clima = weather[0].main;\n  let descripcion = weather[0].description;\n\n  // Traducir clima al español a traves de un helper\n  clima = traducirClima(clima);\n  descripcion = traducirDescripcion(descripcion);\n  \n  return (\n    <div className=\"card-panel white col s12\">\n      <div className=\"black-text\">\n        <h2>El clima de {name} </h2>\n        <p className=\"temperatura\"> {clima} </p>\n        <p> {descripcion} </p>\n        <p className=\"temperatura\">\n          {parseFloat(main.temp - kelvin, 10).toFixed(2)}{\" \"}\n          <span> &#x2103; </span>\n        </p>\n        <p>\n          Temperatura Máxima {parseFloat(main.temp_max - kelvin, 10).toFixed(2)}{\" \"}\n          <span> &#x2103; </span>\n        </p>\n        <p>\n          Temperatura Mínima {parseFloat(main.temp_min - kelvin, 10).toFixed(2)}{\" \"}\n          <span> &#x2103; </span>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Resultado;\n","export function traducirClima(clima) {\n  switch(clima) {\n    case 'Clouds':\n      clima = 'Nublado';\n      break;\n    case 'Clear':\n      clima = 'Despejado';\n      break;\n    default:\n      break;\n  }\n\n  return clima;\n}\n\nexport function traducirDescripcion(descripcion){\n  switch(descripcion) {\n    case 'clear sky':\n      descripcion = 'Cielo despejado';\n      break;\n    case 'overcast clouds':\n      descripcion = 'Cielo encapotado';\n      break;\n    case 'broken clouds':\n      descripcion = 'Parcialmente nublado';\n      break;\n   default:\n      break;\n  }\n\n  return descripcion;\n}\n","import { Fragment, useState, useEffect } from \"react\";\nimport Header from \"./components/Header.jsx\";\nimport Formulario from \"./components/Formulario.jsx\";\nimport Resultado from \"./components/Resultado.jsx\";\nfunction App() {\n  const [locacion, guardarLocacion] = useState({\n    ciudad: \"Caracas\",\n    pais: \"VE\",\n  });\n  const [consultar, guardarConsultar] = useState(false);\n  const [resultado, guardarResultado] = useState(false);\n\n  const { ciudad, pais } = locacion;\n\n  useEffect(() => {\n    const consultarAPI = async () => {\n      if (consultar === true) {\n        console.log(\"Llamando api\");\n\n        const appId = \"91a20896832491da0d512d02792e9d21\";\n        let url = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n        console.log(url);\n\n        const resp = await fetch(url);\n        const result = await resp.json();\n\n        guardarResultado(result);\n        guardarConsultar(false);\n      }\n    };\n\n    consultarAPI();\n  }, [ciudad, pais, consultar, resultado]);\n\n  return (\n    <Fragment>\n      <Header titulo=\"Clima React app\" />\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col m6 s12\">\n              <Formulario\n                guardarLocacion={guardarLocacion}\n                guardarConsultar={guardarConsultar}\n              />\n            </div>\n            <div className=\"col m6 s12\">\n              <Resultado resultado={resultado} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}